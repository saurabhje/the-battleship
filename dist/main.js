(()=>{"use strict";const e=function(){let e=Array(100).fill(null),t=[],n=[];return{placeShip:function(n,r){r.forEach((t=>{e[t]=n})),t.push(n)},receiveAttack:function(t){return null===e[t]?(n.push(t),!1):(e[t].hit(),!0)},allShipsSunk:function(){return t.every((e=>e.isSunk()))},missedAttacks:n}};e();const t=function(e,t){e.innerHTML="";for(let t=0;t<100;t++){const n=document.createElement("div");n.dataset.index=t,n.classList.add("cell"),n.innerText=`${t}`,e.appendChild(n)}},n=function(e,t){let n=0;return{length:t,hit:()=>(n++,n),isSunk:()=>n===t,get name(){return e},get hits(){return n}}};let r,c;r={name:function e(){return e}},c={name:function e(){return e}},function(r,c){let i,l;l=e(),i=e(),l.placeShip(n("destroyer",3),[1,2,3]),l.placeShip(n("cruise",3),[5,6,7]),i.placeShip(n("destroyer",3),[1,2,3]),i.placeShip(n("cruise",3),[8,9,10]);const u=document.getElementById("playerboard"),a=document.getElementById("compboard");t(u,l),t(a,i);let s=!1;a.addEventListener("click",(e=>{const t=e.target.dataset.index,n=i.receiveAttack(t);e.target.style.backgroundColor=!0===n?"#f70202":"#4a4848",(l.allShipsSunk()||i.allShipsSunk())&&(s=!0)}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,