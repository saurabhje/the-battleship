(()=>{"use strict";const t=function(t,e){t.innerHTML="";for(let n=0;n<100;n++){const l=document.createElement("div");l.dataset.index=n,"player"==e?(l.classList.add("cell"),l.classList.add(`h${n}`)):"computer"==e&&(l.classList.add("enemycell"),l.classList.add(`e${n}`)),t.appendChild(l)}},e=function(){let t=Array(100).fill(null),e=[],n=[];return{getShips:function(){return e.length},getBoard:function(){return t},placeShip:function(n,l){let r=n.length,o=[];for(let t=0;t<r;t++)o.push(l+t);o.forEach((e=>{t[e]=n})),e.push(n)},receiveAttack:function(e){return null===t[e]?(n.push(e),!1):(t[e].hit(),!0)},allShipsSunk:function(){return e.every((t=>t.isSunk()))},missedAttacks:n}},n=function(t){let e=0;return{length:t,hit:()=>(e++,e),isSunk:()=>e===t,get hits(){return e}}};function l(t,e){if("player"===t){const t=[5,4,3,2];let l=t.length;const o=document.querySelectorAll(".cell");let u=!0,c=0;const i=document.getElementById("turn");return u&&o.forEach((o=>{o.addEventListener("click",(o=>{const a=o.target,s=parseInt(a.dataset.index),d=function(t,e,n){const l=t.getBoard();for(let t=0;t<n;t++)if(null!==l[e+t])return!1;return!0}(e,s,t[c]),f=r(s,t[c]);if(i.innerText=0==c?"Place your Submarine":1==c?"Place your Attackerr":2==c?"Place your Ship":"Play",d&&f){const r=n(t[c]);e.placeShip(r,s);for(let e=0;e<t[c];e++)document.querySelector(`.h${s+e}`).style.backgroundColor="#292828";c++,c===l&&(u=!1)}}))})),!0}if("computer"===t){const t=[5,4,3,2];let l=t.length,o=0;for(;o<l;){let l=n(t[o]),u=Math.floor(100*Math.random());r(u,t[o])&&(e.placeShip(l,u),o++)}}}function r(t,e){let n=t+e-1,l=Math.floor(t/10);return!(Math.floor(n/10)>l)}!function(n,r){let o,u;u=e(),o=e();const c=[],i=document.getElementById("playerboard"),a=document.getElementById("compboard");t(i,"player"),t(a,"computer"),l("computer",o);let s=!1;s=l("player",u),console.log(o.getShips());let d,f=new Set,h=n,m=!1;function p(t){if(m)return;const e=t.target.dataset.index,n=o.receiveAttack(e);t.target.style.backgroundColor=!0===n?"#f70202":"#02d91b"}a.addEventListener("click",(t=>{if(s){const e=function(t){const e=t.target.dataset.index;return!c.includes(e)&&(c.push(e),!0)}(t);if(e){if(h!==n||m)return;p(t),v(),h=k(),setTimeout(S,100)}}}));let y,g=null;function S(){null!=y||null!=g?null!=y?(d=y,y-=1):null!=g&&(d=g,g+=1):d=function(){let t=Math.floor(100*Math.random());for(;f.has(t);)t=Math.floor(100*Math.random());return t}(),function(t){if(m)return;const e=u.receiveAttack(t),n=i.querySelector(`[data-index='${t}']`);!0===e?(n.style.backgroundColor="#f70202",null==y&&(y=t-1),f.has(y)&&(y=null),null==g&&(g=t+1),f.has(g)&&(g=null)):(n.style.backgroundColor="#02d91b",null!=y?y=null:g=null),f.add(t),v(),h=k()}(d)}function k(){return h=h===n?r:n}function v(){return u.allShipsSunk()?(m=!0,document.getElementById("winner").innerText="Computer Win!",void a.removeEventListener("click",p)):o.allShipsSunk()?(m=!0,void(document.getElementById("winner").innerText="You Win!")):void 0}}({name:"Player"},{name:"Computer"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,