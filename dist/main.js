(()=>{"use strict";const e=function(){let e=Array(100).fill(null),t=[],n=[];return{placeShip:function(n,r){r.forEach((t=>{e[t]=n})),t.push(n)},receiveAttack:function(t){return null===e[t]?(n.push(t),!1):(e[t].hit(),!0)},allShipsSunk:function(){return t.every((e=>e.isSunk()))},missedAttacks:n}};e();const t=function(e,t){e.innerHTML="";for(let t=0;t<100;t++){const n=document.createElement("div");n.dataset.index=t,n.classList.add("cell"),n.innerText=`${t}`,e.appendChild(n)}},n=function(e,t){let n=0;return{length:t,hit:()=>(n++,n),isSunk:()=>n===t,get name(){return e},get hits(){return n}}};!function(r,o){let c,i;i=e(),c=e(),i.placeShip(n("destroyer",3),[1,2,3]),i.placeShip(n("cruise",3),[5,6,7]),c.placeShip(n("destroyer",3),[1,2,3]),c.placeShip(n("cruise",3),[8,9,10]);const l=document.getElementById("playerboard"),a=document.getElementById("compboard");t(l,i),t(a,c);let u=r,s=!1;function d(e){if(s)return;const t=e.target.dataset.index,n=c.receiveAttack(t);e.target.style.backgroundColor=!0===n?"#f70202":"#4a4848"}function p(){if(s)return;let e=Math.floor(100*Math.random());console.log(e);const t=i.receiveAttack(e);l.querySelector(`[data-index='${e}']`).style.backgroundColor=!0===t?"#f70202":"#4a4848",h(),u=f()}function f(){return u=u===r?o:r}function h(){return i.allShipsSunk()?(s=!0,console.log("Game over! Computer won!"),void a.removeEventListener("click",d)):c.allShipsSunk()?(s=!0,void console.log("Game over! Player won!")):void 0}a.addEventListener("click",(e=>{u!==r||s||(d(e),h(),u=f(),setTimeout(p,700))}))}({name:"player1"},{name:"player2"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,