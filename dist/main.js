(()=>{"use strict";const e=function(e,t,n){e.innerHTML="";for(let t=0;t<100;t++){const n=document.createElement("div");n.dataset.index=t,n.classList.add("cell"),n.innerText=`${t}`,e.appendChild(n)}},t=function(){let e=Array(100).fill(null),t=[],n=[];return{placeShip:function(n,l){l.forEach((t=>{e[t]=n})),t.push(n)},receiveAttack:function(t){return null===e[t]?(n.push(t),!1):(e[t].hit(),!0)},allShipsSunk:function(){return t.every((e=>e.isSunk()))},missedAttacks:n}};let n,l;n=t(),l=t();const r=function(e,t="Player"){let l=new Set;return{name:t,Attack:function(t){return e.receiveAttack(t)},randomAttack:function(){let e;do{e=Math.floor(100*Math.random())}while(l.has(e));return l.add(e),n.receiveAttack(e)},previousAttacks:l}},c=function(e,t){let n=0;return{length:t,hit:()=>(n++,n),isSunk:()=>n===t,get hits(){return n},get name(){return e}}};let o,a;o=r(void 0,"Player"),a=r(void 0,"Computer"),function(n,l){let r,o;o=t(),r=t(),o.placeShip(c("destroyer",3),[1,2,3]),o.placeShip(c("cruise",3),[5,6,7]),r.placeShip(c("destroyer",3),[1,2,4]),r.placeShip(c("cruise",3),[8,9,10]);const a=document.getElementById("playerboard"),i=document.getElementById("compboard");e(a,o,n),e(i,r,l);let u=n;for(;!o.allShipsSunk()&&!r.allShipsSunk();){let e=u===n?l:n;if(u===n)i.addEventListener("click",(e=>{const t=e.target.dataset.index,n=u.Attack(t);document.querySelector(".cell").style.backgroundColor=!0===n?"#f70202":"#4a4848"}));else{const e=u.randomAttack();document.querySelector(".cell").style.backgroundColor=!0===e?"#f70202":"#4a4848"}u=e}o.allShipsSunk()?console.log("Comp WIn"):console.log("Player WIn")}(o,a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,