(()=>{"use strict";const e=function(e,t){e.innerHTML="";for(let n=0;n<100;n++){const o=document.createElement("div");o.dataset.index=n,"player"==t?(o.classList.add("cell"),o.classList.add(`h${n}`)):"computer"==t&&(o.classList.add("enemycell"),o.classList.add(`e${n}`)),e.appendChild(o)}},t=function(){let e=Array(100).fill(null),t=[],n=[];return{getShips:function(){return t.length},getBoard:function(){return e},placeShip:function(n,o){let r=n.length,l=[];for(let e=0;e<r;e++)l.push(o+e);l.forEach((t=>{e[t]=n})),t.push(n)},receiveAttack:function(t){return null===e[t]?(n.push(t),!1):(e[t].hit(),!0)},allShipsSunk:function(){return t.every((e=>e.isSunk()))},missedAttacks:n}},n=function(e){let t=0;return{length:e,hit:()=>(t++,t),isSunk:()=>t===e,get hits(){return t}}};function o(e,t){if("player"===e){const e=[5,4,3,2];let o=e.length;const l=document.querySelectorAll(".cell");let c=!0,u=0;const a=document.getElementById("turn");c&&l.forEach((l=>{l.addEventListener("click",(l=>{const i=l.target,s=parseInt(i.dataset.index),d=function(e,t,n){const o=e.getBoard();for(let e=0;e<n;e++)if(null!==o[t+e])return!1;return!0}(t,s,e[u]),f=r(s,e[u]);if(a.innerText=0==u?"Place your Submarine":1==u?"Place your Attackerr":2==u?"Place your Ship":"Play",d&&f){const r=n(e[u]);t.placeShip(r,s);for(let t=0;t<e[u];t++)document.querySelector(`.h${s+t}`).style.backgroundColor="#292828";u++,u===o&&(c=!1)}}))}))}else if("computer"===e){const e=[5,4,3,2];let o=e.length,l=0;for(;l<o;){let o=n(e[l]),c=Math.floor(100*Math.random());r(c,e[l])&&(t.placeShip(o,c),l++)}}}function r(e,t){let n=e+t-1,o=Math.floor(e/10);return!(Math.floor(n/10)>o)}!function(n,r){let l,c;c=t(),l=t();const u=[],a=document.getElementById("playerboard"),i=document.getElementById("compboard");e(a,"player"),e(i,"computer"),o("player",c),o("computer",l),console.log(l.getShips());let s,d=new Set,f=n,h=!1,p=[];function g(e){if(h)return;const t=e.target.dataset.index,n=l.receiveAttack(t);e.target.style.backgroundColor=!0===n?"#f70202":"#02d91b"}function m(){if(p.length>0){const e=p.length,t=p[e-1],n=function(e){const t=[],n=e%10;return n>0&&t.push(e-1),n<9&&t.push(e+1),t}(t);console.log(n);const o=n[0];console.log(`left- ${o}`);const r=n[1];console.log(`right - ${r}`),d.has(o)||(s=o,console.log(`1: ${s}`)),!d.has(r)&&t!==o&&d.has(o)&&(s=r,console.log(`2: ${s}`)),p.pop()}else s=function(){let e=Math.floor(100*Math.random());for(;d.has(e);)e=Math.floor(100*Math.random());return e}();console.log(` real attack - ${s}`),function(e){if(h)return;const t=c.receiveAttack(e),n=a.querySelector(`[data-index='${e}']`);!0===t?(n.style.backgroundColor="#f70202",p.push(e),console.log(p)):n.style.backgroundColor="#02d91b",d.add(e),S(),f=y()}(s)}function y(){return f=f===n?r:n}function S(){return c.allShipsSunk()?(h=!0,document.getElementById("winner").innerText="Computer Win!",void i.removeEventListener("click",g)):l.allShipsSunk()?(h=!0,void(document.getElementById("winner").innerText="You Win!")):void 0}i.addEventListener("click",(e=>{const t=function(e){const t=e.target.dataset.index;return!u.includes(t)&&(u.push(t),!0)}(e);if(t){if(f!==n||h)return;g(e),S(),f=y(),setTimeout(m,100)}}))}({name:"Player"},{name:"Computer"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,