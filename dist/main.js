(()=>{"use strict";const e=function(e,t){e.innerHTML="";for(let n=0;n<100;n++){const r=document.createElement("div");r.dataset.index=n,"player"==t?(r.classList.add("cell"),r.classList.add(`h${n}`)):"computer"==t&&(r.classList.add("enemycell"),r.classList.add(`e${n}`)),e.appendChild(r)}},t=function(){let e=Array(100).fill(null),t=[],n=[];return{board:e,getBoard:function(){return e},placeShip:function(n,r){let o=n.length,l=[];for(let e=0;e<o;e++)l.push(r+e);l.forEach((t=>{e[t]=n})),t.push(n)},receiveAttack:function(t){return null===e[t]?(n.push(t),!1):(e[t].hit(),!0)},allShipsSunk:function(){return t.every((e=>e.isSunk()))},missedAttacks:n}},n=function(e){let t=0;return{length:e,hit:()=>(t++,t),isSunk:()=>t===e,get hits(){return t}}};function r(e,t){if("player"===e){const e=[5,4,3,2];let r=e.length;const l=document.querySelectorAll(".cell");let c=!0,a=0;const i=document.getElementById("turn");c&&l.forEach((l=>{l.addEventListener("click",(l=>{const u=l.target,d=parseInt(u.dataset.index),s=function(e,t,n){const r=e.getBoard();for(let e=0;e<n;e++)if(null!==r[t+e])return!1;return!0}(t,d,e[a]),f=o(d,e[a]);if(i.innerText=0==a?"Place your Submarine":1==a?"Place your Attackerr":2==a?"Place your Ship":"Play",s&&f){const o=n(e[a]);t.placeShip(o,d);for(let t=0;t<e[a];t++)document.querySelector(`.h${d+t}`).style.backgroundColor="#292828";a++,a===r&&(c=!1)}}))}))}else if("computer"===e){const e=[5,4,3,2];let r=e.length,l=0;for(;l<r;){let r=n(e[l]),c=Math.floor(100*Math.random());o(c,e[l])&&(t.placeShip(r,c),l++)}}}function o(e,t){let n=e+t-1,r=Math.floor(e/10);return!(Math.floor(n/10)>r)}!function(n,o){let l,c;c=t(),l=t();const a=[],i=document.getElementById("playerboard"),u=document.getElementById("compboard");e(i,"player"),e(u,"computer"),r("player",c),r("computer",l);let d=new Set,s=n,f=!1;function h(e){if(f)return;const t=e.target.dataset.index,n=l.receiveAttack(t);e.target.style.backgroundColor=!0===n?"#f70202":"#02d91b"}function m(){let e=Math.floor(100*Math.random());for(;d.has(e);)e=Math.floor(100*Math.random());!function(e){if(f)return;const t=c.receiveAttack(e);i.querySelector(`[data-index='${e}']`).style.backgroundColor=!0===t?"#f70202":"#02d91b",d.add(e),y(),s=p()}(e)}function p(){return s=s===n?o:n}function y(){return c.allShipsSunk()?(f=!0,document.getElementById("winner").innerText="Computer Win!",void u.removeEventListener("click",h)):l.allShipsSunk()?(f=!0,void(document.getElementById("winner").innerText="You Win!")):void 0}u.addEventListener("click",(e=>{const t=function(e){const t=e.target.dataset.index;return!a.includes(t)&&(a.push(t),!0)}(e);if(t){if(s!==n||f)return;h(e),y(),s=p(),setTimeout(m,500)}}))}({name:"Player"},{name:"Computer"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQUEsTUF3QkEsRUF2QkksU0FBcUJBLEVBQWNDLEdBQy9CRCxFQUFhRSxVQUFZLEdBQ3pCLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJLElBQUtBLElBQUssQ0FDMUIsTUFBTUMsRUFBT0MsU0FBU0MsY0FBYyxPQUNwQ0YsRUFBS0csUUFBUUMsTUFBUUwsRUFDUixVQUFWRixHQUNDRyxFQUFLSyxVQUFVQyxJQUFJLFFBQ25CTixFQUFLSyxVQUFVQyxJQUFJLElBQUlQLE1BRVQsWUFBVkYsSUFDSkcsRUFBS0ssVUFBVUMsSUFBSSxhQUNuQk4sRUFBS0ssVUFBVUMsSUFBSSxJQUFJUCxNQUUzQkgsRUFBYVcsWUFBWVAsRUFDN0IsQ0FDSixFQytCSixFQTlDQSxXQUNFLElBQUlRLEVBQVFDLE1BQU0sS0FBS0MsS0FBSyxNQUN4QkMsRUFBUSxHQUNSQyxFQUFnQixHQWlDcEIsTUFBTyxDQUNMSixRQUNBSyxTQU5GLFdBQ0UsT0FBT0wsQ0FDVCxFQUtFTSxVQWpDRixTQUFtQkMsRUFBS1gsR0FDdEIsSUFBSVksRUFBYUQsRUFBS0UsT0FDbEJDLEVBQWMsR0FDbEIsSUFBSSxJQUFJbkIsRUFBRSxFQUFFQSxFQUFFaUIsRUFBV2pCLElBQ3ZCbUIsRUFBWUMsS0FBS2YsRUFBTUwsR0FFekJtQixFQUFZRSxTQUFRQyxJQUNsQmIsRUFBTWEsR0FBU04sQ0FBSSxJQUVyQkosRUFBTVEsS0FBS0osRUFFYixFQXVCRU8sY0FyQkYsU0FBdUJKLEdBQ3JCLE9BQTJCLE9BQXZCVixFQUFNVSxJQUNSTixFQUFjTyxLQUFLRCxJQUNaLElBRU9WLEVBQU1VLEdBQ2RLLE9BQ0QsRUFDVCxFQWNFQyxhQVpGLFdBQ0UsT0FBT2IsRUFBTWMsT0FBTVYsR0FBUUEsRUFBS1csVUFDbEMsRUFXRWQsZ0JBRUosRUM1QkEsRUFqQkEsU0FBY0ssR0FDWixJQUFJVSxFQUFPLEVBRVgsTUFBTyxDQUNMVixPQUFRQSxFQUNSTSxJQUFHLEtBQ0RJLElBQ09BLEdBRVRELE9BQU0sSUFDR0MsSUFBU1YsRUFFZFUsV0FDRixPQUFPQSxDQUNULEVBRUosRUNiQSxTQUFTQyxFQUFXL0IsRUFBUWdDLEdBQzFCLEdBQWUsV0FBWGhDLEVBQXFCLENBQ3ZCLE1BQU1pQyxFQUFjLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDOUIsSUFBSUMsRUFBV0QsRUFBWWIsT0FDM0IsTUFBTWUsRUFBUS9CLFNBQVNnQyxpQkFBaUIsU0FDeEMsSUFBSUMsR0FBTyxFQUNQbkMsRUFBSSxFQUNSLE1BQU1vQyxFQUFPbEMsU0FBU21DLGVBQWUsUUFDakNGLEdBQ0ZGLEVBQU1aLFNBQVFwQixJQUNaQSxFQUFLcUMsaUJBQWlCLFNBQVVDLElBQzlCLE1BQU10QyxFQUFPc0MsRUFBTUMsT0FDYm5DLEVBQVFvQyxTQUFTeEMsRUFBS0csUUFBUUMsT0FDOUJxQyxFQTJEaEIsU0FBNEJaLEVBQWFhLEVBQVl6QixHQUNuRCxNQUFNVCxFQUFRcUIsRUFBWWhCLFdBQzFCLElBQUssSUFBSWQsRUFBSSxFQUFHQSxFQUFJa0IsRUFBUWxCLElBRzFCLEdBQXVCLE9BQW5CUyxFQUZZa0MsRUFBYTNDLEdBRzNCLE9BQU8sRUFJWCxPQUFPLENBQ1QsQ0F0RStCNEMsQ0FBbUJkLEVBQWF6QixFQUFPMEIsRUFBWS9CLElBQ2xFNkMsRUFBWUMsRUFBYXpDLEVBQU8wQixFQUFZL0IsSUFhbEQsR0FYRW9DLEVBQUtXLFVBREEsR0FBSi9DLEVBQ2dCLHVCQUVSLEdBQUhBLEVBQ1csdUJBRVIsR0FBSEEsRUFDVyxrQkFHQSxPQUVmMEMsR0FBZ0JHLEVBQVcsQ0FDN0IsTUFBTTdCLEVBQU8sRUFBS2UsRUFBWS9CLElBQzlCOEIsRUFBWWYsVUFBVUMsRUFBTVgsR0FDNUIsSUFBSyxJQUFJMkMsRUFBSSxFQUFHQSxFQUFJakIsRUFBWS9CLEdBQUlnRCxJQUNsQzlDLFNBQVMrQyxjQUFjLEtBQUs1QyxFQUFRMkMsS0FBS0UsTUFBTUMsZ0JBQWtCLFVBRW5FbkQsSUFDSUEsSUFBTWdDLElBQ1JHLEdBQU8sRUFFWCxJQUNBLEdBR1IsTUFBTyxHQUFlLGFBQVhyQyxFQUF1QixDQUNoQyxNQUFNaUMsRUFBYyxDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQzlCLElBQUlDLEVBQVdELEVBQVliLE9BQ3ZCbEIsRUFBSSxFQUVSLEtBQU9BLEVBQUlnQyxHQUFVLENBQ25CLElBQUloQixFQUFPLEVBQUtlLEVBQVkvQixJQUN4QkssRUFBUStDLEtBQUtDLE1BQXNCLElBQWhCRCxLQUFLRSxVQUNWUixFQUFhekMsRUFBTzBCLEVBQVkvQixNQUtsRDhCLEVBQVlmLFVBQVVDLEVBQU1YLEdBQzVCTCxJQUNGLENBQ0YsQ0FDRixDQUVBLFNBQVM4QyxFQUFhSCxFQUFZekIsR0FDaEMsSUFBSXFDLEVBQWdCWixFQUFhekIsRUFBUyxFQUN0Q3NDLEVBQVdKLEtBQUtDLE1BQU1WLEVBQWEsSUFHdkMsUUFGY1MsS0FBS0MsTUFBTUUsRUFBZ0IsSUFFM0JDLEVBS2hCLEVDbkVBLFNBQWtCQyxFQUFTQyxHQUN6QixJQUFJQyxFQUFXN0IsRUFDZkEsRUFBYyxJQUNkNkIsRUFBWSxJQUNaLE1BQU1DLEVBQWUsR0FDZkMsRUFBZTNELFNBQVNtQyxlQUFlLGVBQ3ZDeUIsRUFBZTVELFNBQVNtQyxlQUFlLGFBQzdDLEVBQWdCd0IsRUFBYSxVQUM3QixFQUFnQkMsRUFBYyxZQUc5QmpDLEVBQVcsU0FBU0MsR0FDcEJELEVBQVcsV0FBVzhCLEdBR3RCLElBQUlJLEVBQWlCLElBQUlDLElBQ3JCQyxFQUFnQlIsRUFDaEJTLEdBQVcsRUE2QmYsU0FBU0MsRUFBWTVCLEdBQ25CLEdBQUkyQixFQUNGLE9BRUYsTUFBTUUsRUFBWTdCLEVBQU1DLE9BQU9wQyxRQUFRQyxNQUNqQ2dFLEVBQVNWLEVBQVVwQyxjQUFjNkMsR0FFckM3QixFQUFNQyxPQUFPVSxNQUFNQyxpQkFETixJQUFYa0IsRUFDbUMsVUFFQSxTQUV6QyxDQUVBLFNBQVNDLElBQ1AsSUFBSUMsRUFBSW5CLEtBQUtDLE1BQXNCLElBQWhCRCxLQUFLRSxVQUN4QixLQUFNUyxFQUFlUyxJQUFJRCxJQUN2QkEsRUFBSW5CLEtBQUtDLE1BQXNCLElBQWhCRCxLQUFLRSxXQUt4QixTQUFvQnRELEdBQ2xCLEdBQUlrRSxFQUNGLE9BRUYsTUFBTU8sRUFBVTNDLEVBQVlQLGNBQWN2QixHQUM3QjZELEVBQWFaLGNBQWMsZ0JBQWdCakQsT0FFakRrRCxNQUFNQyxpQkFERyxJQUFac0IsRUFDMkIsVUFFQSxVQUUvQlYsRUFBZXhELElBQUlQLEdBQ25CMEUsSUFDQVQsRUFBZ0JVLEdBQ2xCLENBakJFQyxDQUFXTCxFQUNiLENBa0JBLFNBQVNJLElBQ1AsT0FBUVYsRUFBZ0JBLElBQWtCUixFQUFVQyxFQUFVRCxDQUNoRSxDQUVBLFNBQVNpQixJQUNQLE9BQUk1QyxFQUFZTCxnQkFDZHlDLEdBQVcsRUFDWGhFLFNBQVNtQyxlQUFlLFVBQVVVLFVBQVkscUJBQzlDZSxFQUFhZSxvQkFBb0IsUUFBU1YsSUFHeENSLEVBQVVsQyxnQkFDWnlDLEdBQVcsT0FDWGhFLFNBQVNtQyxlQUFlLFVBQVVVLFVBQVksa0JBRmhELENBS0YsQ0E5RUFlLEVBQWF4QixpQkFBaUIsU0FBVXdDLElBQ3RDLE1BQU1DLEVBZVIsU0FBcUJELEdBQ25CLE1BQU1WLEVBQVlVLEVBQUV0QyxPQUFPcEMsUUFBUUMsTUFDbkMsT0FBR3VELEVBQWFvQixTQUFTWixLQUd6QlIsRUFBYXhDLEtBQUtnRCxJQUNYLEVBQ1QsQ0F0QnVCYSxDQUFZSCxHQUNqQyxHQUFHQyxFQUFhLENBQ2QsR0FBSWQsSUFBa0JSLEdBQVdTLEVBQy9CLE9BRUZDLEVBQVlXLEdBQ1pKLElBQ0FULEVBQWdCVSxJQUNoQk8sV0FBV1osRUFBYyxJQUMzQixJQXFFSixDQ25HQSxDQUFTLENBQUNhLEtBQU0sVUFBVyxDQUFDQSxLQUFNLFkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtYmF0dGxlc2hpcC8uL3NjcmlwdC9ET00uanMiLCJ3ZWJwYWNrOi8vdGhlLWJhdHRsZXNoaXAvLi9zY3JpcHQvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL3RoZS1iYXR0bGVzaGlwLy4vc2NyaXB0L3NoaXAuanMiLCJ3ZWJwYWNrOi8vdGhlLWJhdHRsZXNoaXAvLi9zY3JpcHQvcGxhY2VzaGlwcy5qcyIsIndlYnBhY2s6Ly90aGUtYmF0dGxlc2hpcC8uL3NjcmlwdC9nYW1lbG9vcC5qcyIsIndlYnBhY2s6Ly90aGUtYmF0dGxlc2hpcC8uL3NjcmlwdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkb00gPSAoKCk9PntcclxuICAgIGZ1bmN0aW9uIHJlbmRlckJvYXJkKGJvYXJkRWxlbWVudCwgaG9sZGVyKSB7XHJcbiAgICAgICAgYm9hcmRFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBjZWxsLmRhdGFzZXQuaW5kZXggPSBpO1xyXG4gICAgICAgICAgICBpZihob2xkZXIgPT0gXCJwbGF5ZXJcIil7XHJcbiAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2NlbGwnKTtcclxuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChgaCR7aX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGhvbGRlciA9PSBcImNvbXB1dGVyXCIpe1xyXG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdlbmVteWNlbGwnKTtcclxuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChgZSR7aX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBib2FyZEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbmRlckJvYXJkXHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZG9NIiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vc2hpcFwiO1xyXG5mdW5jdGlvbiBHYW1lYm9hcmQoKSB7XHJcbiAgbGV0IGJvYXJkID0gQXJyYXkoMTAwKS5maWxsKG51bGwpO1xyXG4gIGxldCBzaGlwcyA9IFtdO1xyXG4gIGxldCBtaXNzZWRBdHRhY2tzID0gW107XHJcblxyXG5cclxuICBmdW5jdGlvbiBwbGFjZVNoaXAoc2hpcCxpbmRleCkge1xyXG4gICAgbGV0IHNoaXBsZW5ndGggPSBzaGlwLmxlbmd0aDtcclxuICAgIGxldCBjb29yZGluYXRlcyA9IFtdO1xyXG4gICAgZm9yKGxldCBpPTA7aTxzaGlwbGVuZ3RoO2krKyl7XHJcbiAgICAgIGNvb3JkaW5hdGVzLnB1c2goaW5kZXgraSk7XHJcbiAgICB9XHJcbiAgICBjb29yZGluYXRlcy5mb3JFYWNoKGNvb3JkID0+IHtcclxuICAgICAgYm9hcmRbY29vcmRdID0gc2hpcDtcclxuICAgIH0pO1xyXG4gICAgc2hpcHMucHVzaChzaGlwKTtcclxuXHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHJlY2VpdmVBdHRhY2soY29vcmRpbmF0ZXMpIHtcclxuICAgIGlmIChib2FyZFtjb29yZGluYXRlc10gPT09IG51bGwpIHtcclxuICAgICAgbWlzc2VkQXR0YWNrcy5wdXNoKGNvb3JkaW5hdGVzKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGl0U2hpcCA9IGJvYXJkW2Nvb3JkaW5hdGVzXTtcclxuICAgIGhpdFNoaXAuaGl0KCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFsbFNoaXBzU3VuaygpIHtcclxuICAgIHJldHVybiBzaGlwcy5ldmVyeShzaGlwID0+IHNoaXAuaXNTdW5rKCkpO1xyXG4gIH1cclxuICBmdW5jdGlvbiBnZXRCb2FyZCgpe1xyXG4gICAgcmV0dXJuIGJvYXJkO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGJvYXJkLFxyXG4gICAgZ2V0Qm9hcmQsXHJcbiAgICBwbGFjZVNoaXAsXHJcbiAgICByZWNlaXZlQXR0YWNrLFxyXG4gICAgYWxsU2hpcHNTdW5rLFxyXG4gICAgbWlzc2VkQXR0YWNrcyxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHYW1lYm9hcmQ7IiwiZnVuY3Rpb24gU2hpcChsZW5ndGgpIHtcclxuICBsZXQgaGl0cyA9IDA7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBsZW5ndGg6IGxlbmd0aCxcclxuICAgIGhpdCgpIHtcclxuICAgICAgaGl0cysrXHJcbiAgICAgIHJldHVybiBoaXRzO1xyXG4gICAgfSxcclxuICAgIGlzU3VuaygpIHtcclxuICAgICAgcmV0dXJuIGhpdHMgPT09IGxlbmd0aDtcclxuICAgIH0sXHJcbiAgICBnZXQgaGl0cygpe1xyXG4gICAgICByZXR1cm4gaGl0cztcclxuICAgIH1cclxuICB9O1xyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFNoaXA7IiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vc2hpcFwiO1xyXG5pbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuL2dhbWVib2FyZFwiO1xyXG5cclxuZnVuY3Rpb24gcGxhY2VzaGlwcyhob2xkZXIsIHBsYXllcmJvYXJkKSB7XHJcbiAgaWYgKGhvbGRlciA9PT0gXCJwbGF5ZXJcIikge1xyXG4gICAgY29uc3Qgc2hpcHNMZW5ndGggPSBbNSwgNCwgMywgMl07XHJcbiAgICBsZXQgc2hpcHNsZW4gPSBzaGlwc0xlbmd0aC5sZW5ndGg7XHJcbiAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XHJcbiAgICBsZXQgZ2FtZSA9IHRydWU7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBjb25zdCB0dXJuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3R1cm4nKTtcclxuICAgIGlmIChnYW1lKSB7XHJcbiAgICAgIGNlbGxzLmZvckVhY2goY2VsbCA9PiB7XHJcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgY2VsbCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoY2VsbC5kYXRhc2V0LmluZGV4KTtcclxuICAgICAgICAgIGNvbnN0IGNhblBsYWNlU2hpcCA9IGNoZWNrU2hpcFBsYWNlbWVudChwbGF5ZXJib2FyZCwgaW5kZXgsIHNoaXBzTGVuZ3RoW2ldKTtcclxuICAgICAgICAgIGNvbnN0IG5vT3ZlcmxhcCA9IGNoZWNrT3ZlcmxhcChpbmRleCwgc2hpcHNMZW5ndGhbaV0pO1xyXG4gICAgICAgICAgaWYoaSA9PTApe1xyXG4gICAgICAgICAgICB0dXJuLmlubmVyVGV4dCA9IFwiUGxhY2UgeW91ciBTdWJtYXJpbmVcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaT09MSl7XHJcbiAgICAgICAgICAgIHR1cm4uaW5uZXJUZXh0ID0gXCJQbGFjZSB5b3VyIEF0dGFja2VyclwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpPT0yKXtcclxuICAgICAgICAgICAgdHVybi5pbm5lclRleHQgPSBcIlBsYWNlIHlvdXIgU2hpcFwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdHVybi5pbm5lclRleHQgPSBcIlBsYXlcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChjYW5QbGFjZVNoaXAgJiYgbm9PdmVybGFwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBTaGlwKHNoaXBzTGVuZ3RoW2ldKTtcclxuICAgICAgICAgICAgcGxheWVyYm9hcmQucGxhY2VTaGlwKHNoaXAsIGluZGV4KTsgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHNoaXBzTGVuZ3RoW2ldOyBrKyspIHtcclxuICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuaCR7aW5kZXggKyBrfWApLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiIzI5MjgyOFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgaWYgKGkgPT09IHNoaXBzbGVuKSB7XHJcbiAgICAgICAgICAgICAgZ2FtZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoaG9sZGVyID09PSBcImNvbXB1dGVyXCIpIHtcclxuICAgIGNvbnN0IHNoaXBzTGVuZ3RoID0gWzUsIDQsIDMsIDJdO1xyXG4gICAgbGV0IHNoaXBzbGVuID0gc2hpcHNMZW5ndGgubGVuZ3RoO1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgXHJcbiAgICB3aGlsZSAoaSA8IHNoaXBzbGVuKSB7XHJcbiAgICAgIGxldCBzaGlwID0gU2hpcChzaGlwc0xlbmd0aFtpXSk7XHJcbiAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCk7XHJcbiAgICAgIGNvbnN0IG5vT3ZlcmxhcCA9IGNoZWNrT3ZlcmxhcChpbmRleCwgc2hpcHNMZW5ndGhbaV0pO1xyXG5cclxuICAgICAgaWYgKCFub092ZXJsYXApIHsgLy8gQ2hlY2sgaWYgdGhlIHNoaXAgaXMgb3ZlcmxhcHBpbmdcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfSBcclxuICAgICAgcGxheWVyYm9hcmQucGxhY2VTaGlwKHNoaXAsIGluZGV4KTtcclxuICAgICAgaSsrOyBcclxuICAgIH0gICAgIFxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tPdmVybGFwKHN0YXJ0SW5kZXgsIGxlbmd0aCkge1xyXG4gIGxldCBsYXN0Q2VsbEluZGV4ID0gc3RhcnRJbmRleCArIGxlbmd0aCAtIDE7XHJcbiAgbGV0IGluZGV4cm93ID0gTWF0aC5mbG9vcihzdGFydEluZGV4IC8gMTApO1xyXG4gIGxldCBsYXN0cm93ID0gTWF0aC5mbG9vcihsYXN0Q2VsbEluZGV4IC8gMTApO1xyXG4gIFxyXG4gIGlmIChsYXN0cm93ID4gaW5kZXhyb3cpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrU2hpcFBsYWNlbWVudChwbGF5ZXJib2FyZCwgc3RhcnRJbmRleCwgbGVuZ3RoKSB7XHJcbiAgY29uc3QgYm9hcmQgPSBwbGF5ZXJib2FyZC5nZXRCb2FyZCgpO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IGluZGljZXMgPSBzdGFydEluZGV4ICsgaTtcclxuXHJcbiAgICBpZiAoYm9hcmRbaW5kaWNlc10gIT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IHsgcGxhY2VzaGlwcyB9O1xyXG4iLCJpbXBvcnQgUGxheWVycyBmcm9tIFwiLi9wbGF5ZXJcIjtcclxuaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcclxuaW1wb3J0IFNoaXAgZnJvbSBcIi4vc2hpcFwiO1xyXG5pbXBvcnQgZG9NIGZyb20gXCIuL0RPTVwiO1xyXG5pbXBvcnQgeyBwbGFjZXNoaXBzIH0gZnJvbSBcIi4vcGxhY2VzaGlwc1wiO1xyXG5cclxuZnVuY3Rpb24gZ2FtZUxvb3AocGxheWVyMSwgcGxheWVyMikge1xyXG4gIGxldCBjb21wYm9hcmQsIHBsYXllcmJvYXJkO1xyXG4gIHBsYXllcmJvYXJkID0gR2FtZWJvYXJkKCk7XHJcbiAgY29tcGJvYXJkID0gR2FtZWJvYXJkKCk7XHJcbiAgY29uc3QgY2xpY2tlZENlbGxzID0gW107XHJcbiAgY29uc3QgcGxheWVyMWJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5ZXJib2FyZFwiKTtcclxuICBjb25zdCBwbGF5ZXIyYm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbXBib2FyZFwiKTtcclxuICBkb00ucmVuZGVyQm9hcmQocGxheWVyMWJvYXJkLFwicGxheWVyXCIpO1xyXG4gIGRvTS5yZW5kZXJCb2FyZChwbGF5ZXIyYm9hcmQsIFwiY29tcHV0ZXJcIik7XHJcblxyXG5cclxuICBwbGFjZXNoaXBzKFwicGxheWVyXCIscGxheWVyYm9hcmQpO1xyXG4gIHBsYWNlc2hpcHMoXCJjb21wdXRlclwiLGNvbXBib2FyZCk7XHJcblxyXG4gXHJcbiAgbGV0IHByZXZpb3VzQXR0YWNrID0gbmV3IFNldCgpOyAvL3RvIHByZXZlbnQgdGhlIGNvbXAgZnJvbSBhdHRhY2tpbmcgdGhlIHNhbWUgaW5kZXggdHdpY2VcclxuICBsZXQgY3VycmVudFBsYXllciA9IHBsYXllcjE7XHJcbiAgbGV0IGdhbWVPdmVyID0gZmFsc2U7XHJcblxyXG4gIGxldCBsZWZ0SW5kZXgscmlnaHRJbmRleCA9IG51bGw7XHJcbiAgXHJcbiAgcGxheWVyMmJvYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgY29uc3QgaXN2YWxpZGNsaWNrID0gY2hlY2tEb3VibGUoZSk7XHJcbiAgICBpZihpc3ZhbGlkY2xpY2spe1xyXG4gICAgICBpZiAoY3VycmVudFBsYXllciAhPT0gcGxheWVyMSB8fCBnYW1lT3Zlcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBoYW5kbGVDbGljayhlKTtcclxuICAgICAgY2hlY2tnYW1lT3ZlcigpO1xyXG4gICAgICBjdXJyZW50UGxheWVyID0gc3dpdGNoUGxheWVyKCk7XHJcbiAgICAgIHNldFRpbWVvdXQoY29tcHV0ZXJUdXJuLCA1MDApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgfSk7XHJcblxyXG5cclxuICBcclxuICBmdW5jdGlvbiBjaGVja0RvdWJsZShlKXtcclxuICAgIGNvbnN0IGNlbGxpbmRleCA9IGUudGFyZ2V0LmRhdGFzZXQuaW5kZXg7XHJcbiAgICBpZihjbGlja2VkQ2VsbHMuaW5jbHVkZXMoY2VsbGluZGV4KSl7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNsaWNrZWRDZWxscy5wdXNoKGNlbGxpbmRleCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XHJcbiAgICBpZiAoZ2FtZU92ZXIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY2VsbGluZGV4ID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuaW5kZXg7XHJcbiAgICBjb25zdCByZXN1bHQgPSBjb21wYm9hcmQucmVjZWl2ZUF0dGFjayhjZWxsaW5kZXgpO1xyXG4gICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xyXG4gICAgICBldmVudC50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjZjcwMjAyXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBldmVudC50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjMDJkOTFiXCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb21wdXRlclR1cm4oKSB7XHJcbiAgICBsZXQgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCk7XHJcbiAgICB3aGlsZShwcmV2aW91c0F0dGFjay5oYXMoeCkpe1xyXG4gICAgICB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKTtcclxuICAgIH1cclxuICAgIGNvbXB1dGVyQUkoeCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb21wdXRlckFJKGkpe1xyXG4gICAgaWYgKGdhbWVPdmVyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGNvbXBoaXQgPSBwbGF5ZXJib2FyZC5yZWNlaXZlQXR0YWNrKGkpO1xyXG4gICAgY29uc3QgY2VsbCA9IHBsYXllcjFib2FyZC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pbmRleD0nJHtpfSddYCk7XHJcbiAgICBpZiAoY29tcGhpdCA9PT0gdHJ1ZSkge1xyXG4gICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI2Y3MDIwMlwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIiMwMmQ5MWJcIjtcclxuICAgIH1cclxuICAgIHByZXZpb3VzQXR0YWNrLmFkZChpKTtcclxuICAgIGNoZWNrZ2FtZU92ZXIoKTtcclxuICAgIGN1cnJlbnRQbGF5ZXIgPSBzd2l0Y2hQbGF5ZXIoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN3aXRjaFBsYXllcigpIHtcclxuICAgIHJldHVybiAoY3VycmVudFBsYXllciA9IGN1cnJlbnRQbGF5ZXIgPT09IHBsYXllcjEgPyBwbGF5ZXIyIDogcGxheWVyMSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjaGVja2dhbWVPdmVyKCkge1xyXG4gICAgaWYgKHBsYXllcmJvYXJkLmFsbFNoaXBzU3VuaygpKSB7XHJcbiAgICAgIGdhbWVPdmVyID0gdHJ1ZTtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dpbm5lcicpLmlubmVyVGV4dCA9IFwiQ29tcHV0ZXIgV2luIVwiO1xyXG4gICAgICBwbGF5ZXIyYm9hcmQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNsaWNrKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbXBib2FyZC5hbGxTaGlwc1N1bmsoKSkge1xyXG4gICAgICBnYW1lT3ZlciA9IHRydWU7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aW5uZXInKS5pbm5lclRleHQgPSBcIllvdSBXaW4hXCI7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdhbWVMb29wO1xyXG4iLCJpbXBvcnQgZG9NIGZyb20gXCIuL0RPTVwiO1xyXG5pbXBvcnQgUGxheWVyIGZyb20gXCIuL3BsYXllclwiO1xyXG5pbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuL2dhbWVib2FyZFwiO1xyXG5pbXBvcnQgU2hpcCBmcm9tIFwiLi9zaGlwXCI7XHJcbmltcG9ydCBnYW1lTG9vcCBmcm9tIFwiLi9nYW1lbG9vcFwiO1xyXG5cclxuXHJcbmdhbWVMb29wKHtuYW1lOiBcIlBsYXllclwifSwge25hbWU6IFwiQ29tcHV0ZXJcIn0pO1xyXG4iXSwibmFtZXMiOlsiYm9hcmRFbGVtZW50IiwiaG9sZGVyIiwiaW5uZXJIVE1MIiwiaSIsImNlbGwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkYXRhc2V0IiwiaW5kZXgiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsImJvYXJkIiwiQXJyYXkiLCJmaWxsIiwic2hpcHMiLCJtaXNzZWRBdHRhY2tzIiwiZ2V0Qm9hcmQiLCJwbGFjZVNoaXAiLCJzaGlwIiwic2hpcGxlbmd0aCIsImxlbmd0aCIsImNvb3JkaW5hdGVzIiwicHVzaCIsImZvckVhY2giLCJjb29yZCIsInJlY2VpdmVBdHRhY2siLCJoaXQiLCJhbGxTaGlwc1N1bmsiLCJldmVyeSIsImlzU3VuayIsImhpdHMiLCJwbGFjZXNoaXBzIiwicGxheWVyYm9hcmQiLCJzaGlwc0xlbmd0aCIsInNoaXBzbGVuIiwiY2VsbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2FtZSIsInR1cm4iLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInRhcmdldCIsInBhcnNlSW50IiwiY2FuUGxhY2VTaGlwIiwic3RhcnRJbmRleCIsImNoZWNrU2hpcFBsYWNlbWVudCIsIm5vT3ZlcmxhcCIsImNoZWNrT3ZlcmxhcCIsImlubmVyVGV4dCIsImsiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsYXN0Q2VsbEluZGV4IiwiaW5kZXhyb3ciLCJwbGF5ZXIxIiwicGxheWVyMiIsImNvbXBib2FyZCIsImNsaWNrZWRDZWxscyIsInBsYXllcjFib2FyZCIsInBsYXllcjJib2FyZCIsInByZXZpb3VzQXR0YWNrIiwiU2V0IiwiY3VycmVudFBsYXllciIsImdhbWVPdmVyIiwiaGFuZGxlQ2xpY2siLCJjZWxsaW5kZXgiLCJyZXN1bHQiLCJjb21wdXRlclR1cm4iLCJ4IiwiaGFzIiwiY29tcGhpdCIsImNoZWNrZ2FtZU92ZXIiLCJzd2l0Y2hQbGF5ZXIiLCJjb21wdXRlckFJIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImUiLCJpc3ZhbGlkY2xpY2siLCJpbmNsdWRlcyIsImNoZWNrRG91YmxlIiwic2V0VGltZW91dCIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9