(()=>{"use strict";const e=function(e,t){e.innerHTML="";for(let n=0;n<100;n++){const r=document.createElement("div");r.dataset.index=n,"player"==t?(r.classList.add("cell"),r.classList.add(`h${n}`)):"computer"==t&&(r.classList.add("enemycell"),r.classList.add(`e${n}`)),e.appendChild(r)}},t=function(){let e=Array(100).fill(null),t=[],n=[];return{board:e,getBoard:function(){return e},placeShip:function(n,r){let o=n.length,l=[];for(let e=0;e<o;e++)l.push(r+e);l.forEach((t=>{e[t]=n})),t.push(n)},receiveAttack:function(t){return null===e[t]?(n.push(t),!1):(e[t].hit(),!0)},allShipsSunk:function(){return console.log(t.every((e=>e.isSunk()))),t.every((e=>e.isSunk()))},missedAttacks:n}},n=function(e){let t=0;return{length:e,hit:()=>(t++,t),isSunk:()=>t===e,get hits(){return t}}};function r(e,t){if("player"===e){const e=[5,4,3,2];let r=e.length;const l=document.querySelectorAll(".cell");let c=!0,a=0;const u=document.getElementById("turn");console.log(a),c&&l.forEach((l=>{l.addEventListener("click",(l=>{const i=l.target,d=parseInt(i.dataset.index),s=function(e,t,n){const r=e.getBoard();for(let e=0;e<n;e++)if(null!==r[t+e])return!1;return!0}(t,d,e[a]),f=o(d,e[a]);if(u.innerText=0==a?"Place your Submarine":1==a?"Place your Attackerr":2==a?"Place your Ship":"Play",s&&f){console.log(t.board);const o=n(e[a]);t.placeShip(o,d);for(let t=0;t<e[a];t++)document.querySelector(`.h${d+t}`).style.backgroundColor="#292828";a++,a===r&&(c=!1)}}))}))}else if("computer"===e){const e=[5,4,3,2];let r=e.length,l=0;for(;l<r;){let r=n(e[l]),c=Math.floor(100*Math.random());o(c,e[l])&&(t.placeShip(r,c),l++)}}}function o(e,t){let n=e+t-1,r=Math.floor(e/10);return!(Math.floor(n/10)>r)}!function(n,o){let l,c;c=t(),l=t();const a=[],u=document.getElementById("playerboard"),i=document.getElementById("compboard");e(u,"player"),e(i,"computer"),r("player",c),r("computer",l);let d=new Set,s=n,f=!1;function h(e){if(f)return;const t=e.target.dataset.index,n=l.receiveAttack(t);e.target.style.backgroundColor=!0===n?"#f70202":"#02d91b"}function m(){if(f)return;let e=Math.floor(100*Math.random());for(;d.has(e);)e=Math.floor(100*Math.random());const t=c.receiveAttack(e);u.querySelector(`[data-index='${e}']`).style.backgroundColor=!0===t?"#f70202":"#02d91b",d.add(e),y(),s=p()}function p(){return s=s===n?o:n}function y(){return c.allShipsSunk()?(f=!0,document.getElementById("winner").innerText="Computer Win!",void i.removeEventListener("click",h)):l.allShipsSunk()?(f=!0,void(document.getElementById("winner").innerText="You Win!")):void 0}document.querySelectorAll(".cell"),i.addEventListener("click",(e=>{const t=function(e){const t=e.target.dataset.index;return!a.includes(t)&&(a.push(t),!0)}(e);if(t){if(s!==n||f)return;h(e),y(),s=p(),setTimeout(m,500)}}))}({name:"Player"},{name:"Computer"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,