(()=>{"use strict";const t=function(t,e){t.innerHTML="";for(let n=0;n<100;n++){const o=document.createElement("div");o.dataset.index=n,"player"==e?(o.classList.add("cell"),o.classList.add(`h${n}`)):"computer"==e&&(o.classList.add("enemycell"),o.classList.add(`e${n}`)),t.appendChild(o)}},e=function(){let t=Array(100).fill(null),e=[],n=[];return{getShips:function(){return e.length},getBoard:function(){return t},placeShip:function(n,o){let r=n.length,l=[];for(let t=0;t<r;t++)l.push(o+t);l.forEach((e=>{t[e]=n})),e.push(n)},receiveAttack:function(e){return null===t[e]?(n.push(e),!1):(t[e].hit(),!0)},allShipsSunk:function(){return e.every((t=>t.isSunk()))},missedAttacks:n}},n=function(t){let e=0;return{length:t,hit:()=>(e++,e),isSunk:()=>e===t,get hits(){return e}}};function o(t,e){let n=t+e-1,o=Math.floor(t/10);return!(Math.floor(n/10)>o)}!function(r,l){let i,c;c=e(),i=e();const a=[],u=document.getElementById("playerboard"),s=document.getElementById("compboard");t(u,"player"),t(s,"computer"),function(t,e){{const t=[5,4,3,2];let r=t.length,l=0;for(;l<r;){let r=n(t[l]),i=Math.floor(100*Math.random());o(i,t[l])&&(e.placeShip(r,i),l++)}}}(0,i),c.getShips(),console.log(i.getShips());let d,f=new Set,h=r,p=!1,g=[];function m(t){if(p)return;const e=t.target.dataset.index,n=i.receiveAttack(e);t.target.style.backgroundColor=!0===n?"#f70202":"#02d91b"}function k(){if(g.length>0){const t=g[g.length-1],e=getAdjacentIndex(t);console.log(e);for(const t of e)if(!f.has(t)){d=t;break}g.pop()}else d=function(){let t=Math.floor(100*Math.random());for(;f.has(t);)t=Math.floor(100*Math.random());return t}();!function(t){if(p)return;const e=c.receiveAttack(t),n=u.querySelector(`[data-index='${t}']`);!0===e?(n.style.backgroundColor="#f70202",g.push(t),console.log(g)):n.style.backgroundColor="#02d91b",f.add(t),S(),h=y()}(d)}function y(){return h=h===r?l:r}function S(){return c.allShipsSunk()?(p=!0,document.getElementById("winner").innerText="Computer Win!",void s.removeEventListener("click",m)):i.allShipsSunk()?(p=!0,void(document.getElementById("winner").innerText="You Win!")):void 0}s.addEventListener("click",(t=>{if(shipPlaced){const e=function(t){const e=t.target.dataset.index;return!a.includes(e)&&(a.push(e),!0)}(t);if(e){if(h!==r||p)return;m(t),S(),h=y(),setTimeout(k,100)}}}))}({name:"Player"},{name:"Computer"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,